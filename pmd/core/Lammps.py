from pmd.core.Procedure import Procedure
from pmd.util import Util


class Lammps:
    '''Template object to contain LAMMPS initialization settings

    Attributes:
        data_fname (str): File name of the data file, which will be read in by LAMMPS 
                          [read_data](https://docs.lammps.org/read_data.html) command

        force_field (str): Force field (`GAFF2` or `OPLS`)

        atom_style (str): LAMMPS [atom_style](https://docs.lammps.org/atom_style.html)
                          to use during simulation; default=full

        units (str): LAMMPS [units](https://docs.lammps.org/units.html) to use during 
                     simulation; default=real
                     
        timestep (float): LAMMPS [timestep](https://docs.lammps.org/timestep.html) to 
                          use during simulation; default=1 fs

        neighbor_skin (float): LAMMPS [neighbor](https://docs.lammps.org/neighbor.html) 
                               skin size to use during simulation; default=2.0 Angstrom

        neighbor_every (int): LAMMPS [neighbor](https://docs.lammps.org/neighbor.html) 
                              list checking frequency to use during simulation; default=1 fs

        thermo (int): LAMMPS [thermo](https://docs.lammps.org/thermo.html) to use during 
                      simulation; default=1000 timestep
    '''

    def __init__(self,
                 data_fname,
                 force_field,
                 atom_style='full',
                 units='real',
                 timestep=1,
                 neighbor_skin=2.0,
                 neighbor_every=1,
                 thermo=1000):
        self._data_fname = data_fname
        self._force_field = force_field
        self._atom_style = atom_style
        self._units = units
        self._timestep = timestep
        self._neighbor_skin = neighbor_skin
        self._neighbor_every = neighbor_every
        self._thermo = thermo
        self._procedures = []

    def add_procedure(self, procedure: Procedure):
        '''Method to add simulation procedure
        Parameters:
            procedure (Procedure): One of `minimization`, `equilibration`, or `Tg_measurement`

        Returns:
            Lammps (Lammps): Lammps instance itself (builder design pattern)
        '''

        self._procedures.append(procedure)

    def write_input(self, output_dir: str, lmp_input_fname: str):
        '''Method to make LAMMPS input files
        Parameters:
            output_dir (str): Directory for all the generated LAMMPS input files

        Returns:
            None
        '''

        Util.build_dir(output_dir)

        # Write settings file
        settings_fname = 'settings.in'
        with open(output_dir + '/' + settings_fname, 'w') as f:
            if (self._force_field == 'gaff2'):
                f.write(
                    '{:<15} lj/cut/coul/long 12.0 12.0\n'.format('pair_style'))
                f.write('{:<15} mix arithmetic\n'.format('pair_modify'))
                f.write('{:<15} pppm 1e-4\n'.format('kspace_style'))
                f.write('{:<15} harmonic\n'.format('bond_style'))
                f.write('{:<15} harmonic\n'.format('angle_style'))
                f.write('{:<15} fourier\n'.format('dihedral_style'))
                f.write('{:<15} cvff\n'.format('improper_style'))
                f.write('{:<15} amber\n'.format('special_bonds'))
            elif (self._force_field == 'opls'):
                f.write('{:<15} lj/cut/coul/long 9.0\n'.format('pair_style'))
                f.write(
                    '{:<15} mix geometric tail yes\n'.format('pair_modify'))
                f.write('{:<15} pppm 1e-4\n'.format('kspace_style'))
                f.write('{:<15} harmonic\n'.format('bond_style'))
                f.write('{:<15} harmonic\n'.format('angle_style'))
                f.write('{:<15} opls\n'.format('dihedral_style'))
                f.write('{:<15} cvff\n'.format('improper_style'))
                f.write('{:<15} lj/coul 0.0 0.0 0.5\n'.format('special_bonds'))

        # Write LAMMPS input file
        with open(output_dir + '/' + lmp_input_fname, 'w') as f:

            f.write('# LAMMPS input file generated by PMD package\n')
            f.write('\n')

            f.write('### Initialization\n')
            f.write('{:<15} full\n'.format('atom_style'))
            f.write('{:<15} {}\n'.format('units', self._units))
            f.write('{:<15} {}\n'.format('include', settings_fname))
            f.write('{:<15} {}\n'.format('read_data', self._data_fname))
            f.write('\n')
            f.write('{:<15} {} bin\n'.format('neighbor', self._neighbor_skin))
            f.write('{:<15} delay 0 every {} check yes\n'.format(
                'neigh_modify', self._neighbor_every))
            f.write('\n')
            f.write(
                '{:<15} custom step temp density vol press ke pe ebond evdwl ecoul elong\n'
                .format('thermo_style'))
            f.write('{:<15} {}\n'.format('thermo', self._thermo))
            f.write('{:<15} {}\n'.format('timestep', self._timestep))
            f.write('\n')
            f.write('\n')

            for procedure in self._procedures:
                procedure.write_input(f)
