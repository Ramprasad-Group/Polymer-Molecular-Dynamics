import os
from typing import List, TypeVar, Union

from pmd.core.Procedure import Procedure
from pmd.core.System import System
from pmd.util import Util

Lammps = TypeVar("Lammps", bound="Lammps")


class Lammps:
    '''Template object to contain LAMMPS initialization settings

    Attributes:
        read_data_from (System): System object that the data file will be read
                                 from; one of this attribute and 
                                 `read_restart_from` has to be provided but not
                                 both (providing both will result in an error)
                                 ; default: `None`
        
        read_restart_from (Lammps): Lammps object that the last restart file 
                                    created will be read from; one of this 
                                    attribute and `read_data_from` has to be
                                    provided but not both (providing both will
                                    result in an error); default: `None`

        atom_style (str): LAMMPS 
                          [atom_style](https://docs.lammps.org/atom_style.html)
                          to use during simulation; default: `full`

        units (str): LAMMPS [units](https://docs.lammps.org/units.html) to use
                     during simulation; default: `real`
                     
        timestep (float): LAMMPS 
                          [timestep](https://docs.lammps.org/timestep.html) to
                          use during simulation; default: `1 fs`

        neighbor_skin (float): LAMMPS 
                            [neighbor](https://docs.lammps.org/neighbor.html)
                            skin size to use during the simulation; default: 
                            `2.0 Angstrom`
                            
        neighbor_every (int): LAMMPS 
                            [neighbor](https://docs.lammps.org/neighbor.html) 
                            list checking frequency to use during the
                            simulation; default: `1 fs`

        thermo (int): LAMMPS [thermo](https://docs.lammps.org/thermo.html) 
                      to use during simulation; default: `1000 timestep`
            
        lmp_input_fname (str): Name of the LAMMPS input file; default: `lmp.in`
    '''

    def __init__(self,
                 read_data_from: System = None,
                 read_restart_from: Lammps = None,
                 atom_style: str = 'full',
                 units: str = 'real',
                 timestep: int = 1,
                 neighbor_skin: float = 2.0,
                 neighbor_every: int = 1,
                 thermo: int = 1000,
                 lmp_input_fname: str = 'lmp.in'):

        if not read_data_from and not read_restart_from:
            raise ValueError(
                'One of read_data_from and read_restart_from has to be defined'
            )
        elif read_data_from and read_restart_from:
            raise ValueError(
                'Only one of read_data_from and read_restart_from can be defined'
            )

        self._read_data_from = read_data_from
        self._read_restart_from = read_restart_from
        self._atom_style = atom_style
        self._units = units
        self._timestep = timestep
        self._neighbor_skin = neighbor_skin
        self._neighbor_every = neighbor_every
        self._thermo = thermo
        self._lmp_input_fname = lmp_input_fname
        self._procedures = []

    @property
    def lmp_input_fname(self) -> str:
        return self._lmp_input_fname

    def add_procedure(self, procedure: Union[Procedure,
                                             List[Procedure]]) -> Lammps:
        '''Method to add simulation procedure
        Parameters:
            procedure (Procedure): One of `minimization`, `equilibration`, 
            `NPT`, `NVT`, and `Tg_measurement`

        Returns:
            Lammps (Lammps): Lammps instance itself (builder design pattern)
        '''
        if not isinstance(procedure, list):
            procedure = [procedure]

        for p in procedure:
            self._procedures.append(p)
        return self

    @Util.build_dir
    def write_lammps(self, output_dir: str = '.') -> None:
        '''Method to make LAMMPS input files
        Parameters:
            output_dir (str): Directory for the generated LAMMPS input file
                              ; default: `.`

        Returns:
            None
        '''

        # Write LAMMPS input file
        with open(os.path.join(output_dir, self._lmp_input_fname), 'w') as f:

            f.write('# LAMMPS input file generated by PMD package\n')
            f.write('\n')

            f.write('### Initialization\n')
            f.write(f'{"atom_style":<15} full\n')
            f.write(f'{"units":<15} {self._units}\n')
            if self._read_data_from:
                # TODO: move to ForceField Object?
                force_field = self._read_data_from.force_field
                if (force_field == 'gaff2'):
                    f.write(f'{"pair_style":<15} lj/cut/coul/long 12.0 12.0\n')
                    f.write(f'{"pair_modify":<15} mix arithmetic\n')
                    f.write(f'{"kspace_style":<15} pppm 1e-4\n')
                    f.write(f'{"bond_style":<15} harmonic\n')
                    f.write(f'{"angle_style":<15} harmonic\n')
                    f.write(f'{"dihedral_style":<15} fourier\n')
                    f.write(f'{"improper_style":<15} cvff\n')
                    f.write(f'{"special_bonds":<15} amber\n')
                elif (force_field == 'opls'):
                    f.write(f'{"pair_style":<15} lj/cut/coul/long 9.0\n')
                    f.write(f'{"pair_modify":<15} mix geometric tail yes\n')
                    f.write(f'{"kspace_style":<15} pppm 1e-4\n')
                    f.write(f'{"bond_style":<15} harmonic\n')
                    f.write(f'{"angle_style":<15} harmonic\n')
                    f.write(f'{"dihedral_style":<15} opls\n')
                    f.write(f'{"improper_style":<15} cvff\n')
                    f.write(f'{"special_bonds":<15} lj/coul 0.0 0.0 0.5\n')
                f.write('\n')
                f.write(
                    f'{"read_data":<15} {self._read_data_from.data_fname}\n')

            # TODO: add last_restart_fname
            # elif self._read_restart_from:
            #   f.write(f'{"read_restart":<15} '
            #           f'{self._read_restart_from.last_restart_fname}\n')
            f.write('\n')
            f.write(f'{"neighbor":<15} {self._neighbor_skin} bin\n')
            f.write(f'{"neigh_modify":<15} delay 0 every '
                    f'{self._neighbor_every} check yes\n')
            f.write('\n')
            f.write(
                f'{"thermo_style":<15} custom step temp density vol press ke '
                f'pe ebond evdwl ecoul elong\n')
            f.write(f'{"thermo":<15} {self._thermo}\n')
            f.write(f'{"timestep":<15} {self._timestep}\n')
            f.write('\n')
            f.write('\n')

            for procedure in self._procedures:
                procedure.write_lammps(f)
