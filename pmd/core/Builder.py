import glob
import os
import shutil
from typing import Tuple
import numpy as np

import pandas as pd

import pyemc

from pmd.util import build_dir, Pmdlogging, HiddenPrints

EMC_FORCE_FIELD_OPTIONS = ('pcff', 'opls-aa', 'opls-ua', 'trappe', 'charmm')
PSP_FORCE_FIELD_OPTIONS = ('opls-lbcc', 'opls-cm1a', 'gaff2-gasteiger',
                           'gaff2-am1bcc')


class Builder:

    def __init__(self, force_field: str,
                 force_field_options: Tuple[str]) -> None:
        self._force_field = force_field
        self._validate_force_field(force_field_options)

    def __repr__(self) -> str:
        return type(self).__name__

    def _validate_force_field(self, options):
        if self._force_field not in options:
            raise ValueError(f'Invalid {self} force_field, valid options are '
                             f'{", ".join(options)}')

    def write_data(self) -> None:
        raise NotImplementedError


class EMC(Builder):

    def __init__(self, force_field: str) -> None:
        super().__init__(force_field, EMC_FORCE_FIELD_OPTIONS)

    @build_dir
    def write_data(self, output_dir: str, smiles: str, density: float,
                   natoms_total: int, length: int, nchains: int,
                   data_fname: str, cleanup: bool) -> None:

        previous_dir = os.getcwd()
        os.chdir(output_dir)

        # Write .esh file required to run EMC
        tmp_eshfile = f'{data_fname.split(".")[0]}.esh'
        with open(tmp_eshfile, 'w') as f:
            f.write('# EMC input file generated by PMD\n')
            f.write('ITEM OPTIONS\n')
            f.write('replace true\n')
            f.write(f'field {self._force_field}\n')
            f.write(f'density {density}\n')
            f.write(f'ntotal {natoms_total}\n')
            f.write('ITEM END\n')
            f.write('\n')
            f.write('ITEM GROUPS\n')
            f.write(f'RU {smiles},1,RU:2\n')
            f.write('terminator *[H],1,RU:1,1,RU:2\n')
            f.write('ITEM END\n')
            f.write('\n')
            f.write('ITEM CLUSTERS\n')
            f.write('poly alternate 1\n')
            f.write('ITEM END\n')
            f.write('\n')
            f.write('ITEM POLYMERS\n')
            f.write('poly\n')
            f.write(f'1 RU,{length},terminator,2\n')
            f.write('ITEM END\n')

        pyemc.setup(tmp_eshfile)
        pyemc.build('build.emc')

        # Clean up all EMC generated files except for the data file
        if cleanup:
            fnames = ['build.emc']
            fnames += glob.glob('*.esh')
            fnames += glob.glob('*.gz')
            fnames += glob.glob('*.in')
            fnames += glob.glob('*.vmd')
            fnames += glob.glob('*.params')
            for fname in fnames:
                try:
                    os.remove(fname)
                except Exception:
                    print(f'problem removing {fname} during cleanup')

        os.chdir(previous_dir)


class PSP(Builder):

    def __init__(self, force_field: str) -> None:
        super().__init__(force_field, PSP_FORCE_FIELD_OPTIONS)

    def _is_opls_force_field(self):
        return self._force_field.startswith('opls')

    def _run_psp(self, input_data: dict, density: float, data_fname: str,
                 output_dir: str, cleanup: bool) -> None:
        try:
            import psp.AmorphousBuilder as ab
        except ImportError:
            raise ImportError('Please install PSP to use PSP builder')

        Pmdlogging.info(
            'PSP builder: Creating the system, this may take a while...')
        try:
            with HiddenPrints():
                amor = ab.Builder(pd.DataFrame(data=input_data),
                                  density=density,
                                  OutDir=output_dir)
                amor.Build()

                if self._is_opls_force_field:
                    amor.get_opls(
                        output_fname=data_fname,
                        lbcc_charges=self._force_field.endswith('opls-lbcc'))
                else:
                    amor.get_gaff2(
                        output_fname=data_fname,
                        atom_typing='antechamber',
                        am1bcc_charges=self._force_field.endswith('am1bcc'),
                        swap_dict={
                            'ns': 'n',
                            'nt': 'n',
                            'nv': 'nh'
                        })
            Pmdlogging.info(
                f'System file - {data_fname} successfully created in {output_dir}'
            )
        finally:
            if cleanup:
                force_field_dname = [
                    'ligpargen'
                ] if self._is_opls_force_field else ['pysimm']
                dnames = ['molecules', 'packmol'] + force_field_dname
                for dir in dnames:
                    try:
                        shutil.rmtree(os.path.join(output_dir, dir))
                    except FileNotFoundError:
                        pass

                fnames = ['amor_model.data', 'amor_model.vasp']
                for file in fnames:
                    try:
                        os.remove(os.path.join(output_dir, file))
                    except FileNotFoundError:
                        pass

                fnames = ['output_MB.csv', 'molecules.csv']
                for file in fnames:
                    try:
                        os.remove(file)
                    except FileNotFoundError:
                        pass

    def write_data(self, output_dir: str, smiles: str, density: float,
                   natoms_total: int, length: int, nchains: int,
                   data_fname: str, cleanup: bool) -> None:

        input_data = {
            'ID': ['Poly'],
            'smiles': [smiles],
            'Len': [length],
            'Num': [nchains],
            'NumConf': [1],
            'Loop': [False],
            'LeftCap': ['[*][H]'],
            'RightCap': ['[*][H]']
        }
        self._run_psp(input_data, density, data_fname, output_dir, cleanup)

    def write_solvent_data(self, output_dir, smiles, solvent_smiles, density,
                           natoms_total, length, nsolvents, nchains,
                           data_fname, cleanup):

        input_data = {
            'ID': ['Sol', 'Poly'],
            'smiles': [solvent_smiles, smiles],
            'Len': [1, length],
            'Num': [nsolvents, nchains],
            'NumConf': [1, 1],
            'Loop': [False, False],
            'LeftCap': [np.nan, '[*][H]'],
            'RightCap': [np.nan, '[*][H]']
        }
        self._run_psp(input_data, density, data_fname, output_dir, cleanup)
